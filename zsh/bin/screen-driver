#!/usr/bin/env ruby
################################################################################
require 'rubygems'
require 'highline/import'

################################################################################
class Sessions
  ################################################################################
  def initialize
    @sessions = {}

    open("|screen -ls") do |io|
      io.each do |line|
        if m = line.match(/(\d+\.\w+)/)
          @sessions[m[1].sub(/^\d+\./, '')] = m[1]
        end
      end
    end
  end

  ################################################################################
  def names
    @sessions.keys.sort
  end

  ################################################################################
  def start (name)
    ENV['SCREEN_SESSION_NAME'] = name

    if File.exist?(File.expand_path("~/.screen/#{name}"))
      ENV['SCREEN_SOURCE'] = File.expand_path("~/.screen/#{name}")
    elsif File.exist?('script/server') # looks like rails!
      ENV['SCREEN_SOURCE'] = File.expand_path("~/.screen/rails")
    else
      ENV['SCREEN_SOURCE'] = File.expand_path("~/.screen/default")
    end

    if @sessions.has_key?(name)
      system('screen', '-x', @sessions[name])
    else
      system('screen', '-S', name)
    end
  end

end

################################################################################
loop do
  sessions = Sessions.new
  system('clear')

  begin
    session = choose do |menu|
      menu.prompt = "Select a screen session: "
      menu.choices("New Screen Session", *sessions.names)
      menu.first_answer = ARGV.first unless ARGV.empty?
      ARGV.clear
    end
  rescue EOFError => e
    exit
  end

  if session.match(/^New/)
    name = ask("Name: ")
    path = ask("Path: ") {|q| q.readline = true}
    Dir.chdir(path) {sessions.start(name)}
  else
    sessions.start(session)
  end
end
