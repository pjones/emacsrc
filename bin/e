#!/usr/bin/env ruby

################################################################################
require('optparse')

################################################################################
class RemoteEmacs
  
  ##############################################################################
  REMOTE_SERVER_FILE = '/tmp/emacs-server'
  
  ##############################################################################
  DEFAULT_OPTIONS = {
    'verbose' => false,
    'server'  => 'server',
    'version' => false, 
    'tty'     => false, 
    'frame'   => false,
    'eval'    => false,
    'wait'    => false,
  }
  
  ##############################################################################
  OptionProxy = Struct.new(*DEFAULT_OPTIONS.keys.sort.map {|k| k.to_sym})
  
  ##############################################################################
  def initialize
    @options = OptionProxy.new(*DEFAULT_OPTIONS.keys.sort.map {|k| DEFAULT_OPTIONS[k]})
    
    OptionParser.new do |p|
      p.on('-h', '--help', 'This message.') {$stdout.puts(p); exit}
      p.on('-V', '--version', 'Show Emacs version information') {|v| @options.version = v}
      p.on('--verbose', 'Enable verbose messages') {|v| @options.verbose = v}
      p.on('-t', '--tty', 'Open a new frame on the current terminal') {|t| @options.tty = t}
      p.on('-c', '--create-frame', 'Create a new Emacs frame') {|f| @options.frame = f}
      p.on('-e', '--eval', 'Eval the file argument as lisp') {|e| @options.eval = e}
      p.on('-n', '--no-wait', 'Don\'t wait for Emacs [default]') {@options.wait = false}
      p.on('-w', '--wait', 'Wait for Emacs to finish') {@options.wait = true}
      p.on('-s', '--server=NAME', 'Set the server name to use') {|s| @options.server = s}
    end.parse!(ARGV)
    
    @emacsclient = ['emacsclient']
    @socket_file = File.expand_path("~/.emacs.d/server/#{@options.server}")
  end
  
  ##############################################################################
  def run
    @emacsclient << '--version'      if @options.version
    @emacsclient << '--tty'          if @options.tty
    @emacsclient << '--create-frame' if @options.frame
    @emacsclient << '--eval'         if @options.eval
    
    if !@options.wait    and 
       !@options.tty     and
       !@options.eval    and
       !@options.version
    then
      @emacsclient << '--no-wait'
    end

    if !File.exist?(@socket_file)
      prepare_for_remote_send
    else
      # TODO: Use this for remotes too once I upgrade Emacs on my
      # virtual machines.
      @emacsclient << '--quiet' if !@options.verbose
      @emacsclient << "--server-file=#{@socket_file}"
    end

    @emacsclient.concat(ARGV)
    $stdout.puts(@emacsclient.join(' ')) if @options.verbose
    exec(*@emacsclient) || raise('emacsclient failed')
  end
  
  ##############################################################################
  private
  
  ##############################################################################
  def prepare_for_remote_send
    fetch_remote_server_file
    @emacsclient << "--server-file=#{REMOTE_SERVER_FILE}"
    return if @options.eval

    host = `hostname`.chomp
    
    ARGV.map! do |arg|
      file = File.expand_path(arg)
      file.sub(ENV['HOME'], "/Users/pjones/Develop/hosts/#{host}")
    end
  end
  
  ##############################################################################
  def fetch_remote_server_file
    system('scp', '-qB', '192.168.31.1:.emacs.d/server/server', REMOTE_SERVER_FILE)
  end
end

################################################################################
begin
  RemoteEmacs.new.run
rescue RuntimeError => e
  $stderr.puts(File.basename($0) + ": ERROR: #{e}")
  exit(1)
end
