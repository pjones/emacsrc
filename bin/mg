#!/usr/bin/env zsh

################################################################################
#
# Work with multiple git repositories at once.
#
################################################################################
REPO_LIST=$HOME/.mglist
source ~/.zsh/app/git.zsh

################################################################################
usage () {
  echo "Usage: mgit command"
  echo
  echo "  Commands:"
  echo "      list: List managed repositories"
  echo "    status: Show the status of each repository"
  echo "      sync: Attempt to sync (pull/push) each repository"
  echo "       add: Add a repository to the list"
  echo "      edit: open your editor on the repo list"
}

################################################################################
die () {
  echo "error: " "$@"
  exit 1
}

################################################################################
do_add () {
  if [ $# -ne 1 ]; then
    echo "Usage: mgit add directory"
    exit 1
  fi

  if [ ! -d $1 ]; then
    echo "no such directory: $1"
    exit 1
  fi

  if [ ! -d $1/.git ]; then
    echo "not a git repository: $1"
    exit 1
  fi

  name=$(echo ${1:a}|sed "s|$HOME|~|")
  echo $name >> $REPO_LIST
}

################################################################################
do_list () {
  awk -F/ '{print $NF ": " $0}' < $REPO_LIST | column -t
}

################################################################################
do_status () {
  for repo in $(cat $REPO_LIST); do
    repo=${repo:s/~/$HOME}

    cd $repo
    name=$(basename $repo)

    if git_repo_has_changes; then
      echo "${name}: dirty"
    elif git_repo_needs_push; then
      echo "${name}: push"
    else
      echo "${name}: clean"
    fi
  done
}

################################################################################
do_sync () {
  if do_status | grep -q dirty; then
    echo "dirty repo, try mgit status first"
    exit 1
  fi

  for r in $(cat $REPO_LIST); do
    repo=${r:s/~/$HOME}

    cd $repo
    name=$(basename $repo)

    echo "==> $name: $r (pull)"
    git pull > /dev/null 2>&1 || die "failed to git pull"

    if git_repo_needs_push; then
      echo "==> $name: $r (push)"
      git push > /dev/null 2>&1 || die "failed to git push"
    fi

    if [ -r .gitmodules ]; then
      echo "==> $name: $r (update submodules)"
      git submodule update --init > /dev/null 2>&1
    fi
  done
}

################################################################################
[ -r $REPO_LIST ] || touch $REPO_LIST

################################################################################
commad=$1
[ $# -gt 0 ] && shift

case $commad in
  add)
    do_add "$@"
    ;;

  edit)
    eval "${EDITOR:-vi} $REPO_LIST"
    ;;

  list)
    do_list
    ;;

  sync)
    do_sync
    ;;

  --help|-h|help)
    usage
    exit
    ;;

  status|st|s|*)
    do_status | column -t | sort -sk 2 | \
      egrep --color=auto 'dirty|$'
    ;;
esac
